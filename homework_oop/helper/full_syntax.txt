Важно: Везде, где написано "строка" имеется в виду строка без пробельных символов

Синтаксис возможных команд:

Всего 5 типов команд, у каждой свой синтаксис,
если команда не соотвествует синтаксису, то она не будет выполнена:

I) help - команда-помощник, выводит нужную документацию по запросу.
    1) help full_syntax - выводит весь синтаксис
    2) help commands - выводит список всех существующих команд
    3) help fields - выводит список всех существующих полей с их типами
    4) help compare_operators - выводит список всех существующих операторов сравнения с их типами
    5) help <название_команды> - выводит подробную информацию о конкретной команде
        Примечание: можно даже сделать help help

II) filter - оставляет только репозитории, удовлетворяющие условию
    1) filter <название_поля_целочисленного_типа> оператор_сравнения число
        Пример: filter size <= 100
    2.1) filter alphabet <название_поля_строкового_типа> оператор_сравнения строка
        Пример: filter alphabet language == TypeScript
    2.2) filter length <название_поля_строкового_типа> оператор_сравнения число
        Пример: filter length name < 20
    2.3) filter contains <название_поля_строкового_типа> строка
        Пример: filter contains description developer
    3) filter <название_поля_логического_типа> true / false
        Пример: filter has_wiki true
    4) filter <название_поля_типа_дата_и_время> оператор_сравнения дата_и_время
        Пример: filter created_at >= 2013-10-11T06:50:37Z
    5) filter contains topics строка
        Пример: filter contains topics education
    Можно написать несколько фильтров, тогда они применятся все одновременно.
    Важно: ни один фильтр не выполнится до сохранения файла!

III) sort - сортирует репозитории по указанному полю в указанном порядке (неубывание, невозрастание)
    1) sort increase / decrease <название_поля_любого_типа_кроме_особого_и_строк>
        Пример: sort decrease forks
        Примечание: строки сортируются по алфавиту
    2.1) sort increase/decrease <название_поля_строкового_типа> alphabet
        Пример: sort decrease name alphabet
    2.2) sort increase/decrease <название_поля_строкового_типа> length
        Пример: sort increase name length
    3) sort increase/decrease topics size
        Примечание: сортировка по количеству тем
    Можно написать несколько сортировок, тогда их приоритеты будут расставлены по порядку,
        то есть в случае равенства по первому полю они будут отсортированы уже по второму
    Важно: ни одна сортировка не выполнится до сохранения файла!

IV) group_by - разбивает выбранные репозитории на группы,
        в каждой из которых одно и то же значение выбранной переменной
     Пример: group_by language
     Важно: нельзя написать сразу несколько group_by, он может быть максимум один.
        Также он будет выполняться уже после всех фильтров и сортировок,
        все репозитории с одинаковым значением поля группировки будут находиться рядом.
        Строки группируются по алфавиту, topics по размеру

V) save - выполняет все написанные ранее команды filter, sort и group_by
        и записывает результат в указанный файл
    save txt / csv / json название_файла_без_расширения
    Пример: save txt file_name
    Примечание: очищает набор команд
    Важно: json пока не реализован

VI) stop - останавливает работу программы полностью

VII) reset - отменяет все ранее сделанные операции и возвращает в исходное состояние

VIII) save_query - сохраняет весь последний набор запросов filter, sort, group_by
    save_query строка
    Строка будет именем данного запроса. В случае, если пользователь выберет уже существующее имя, то
        запрос по этому имени перезапишется.
    Данная команда нужна, чтобы можно было вызывать сохранённые запросы одной комнадой.
    Важно: save_query полностью очищает историю запросов.

IX) call - вызывает сохранённый запрос по имени
    call строка
    Если такого сохранённого запроса нет, то будет ошибка синтаксиса.
    Важно: если хотите вызвать сохранённый запрос с group_by, то обязательно сделайте reset
X) get_statistics - выполняет один из найденных статистических запросов и сохраняет результат в файл
    1) get_statistics cnt in txt / csv / json название_файла_без_расширения
        Пример: get_statistics cnt in txt size_median
        Комментарий: вычисляет текущее количество репозиториев
    2) get_statistics median <название_поля_целочисленного_типа> in txt / csv / json название_файла_без_расширения
        Пример: get_statistics median size in txt size_median
        Комментарий: вычисляет медианное значение целочисленного поля у текущего списка репозиториев
    3) get_statistics avg <название_поля_целочисленного_типа> in txt / csv / json название_файла_без_расширения
        Пример: get_statistics avg size in txt size_median
        Комментарий: вычисляет среднее арифметическое значение целочисленного поля у текущего списка репозиториев
    4) get_statistics top число min / max <название_поля_целочисленного_типа> in txt / csv / json название_файла_без_расширения
        Пример: get_statistics top 10 max stars in txt result
        Комментарий: находит нужное количество репозиториев максимальных или минимальных по значению целочисленного поля
        Важно: Если число больше, чем всего репозиториев, то выведутся все

Список полей:
1) Целочисленный тип: size, stars, forks, issues, watchers
2) Строковый тип: name, description, url, home_page, language, licence, default_branch
3) Логический тип: has_issues, has_projects, has_downloads, has_wiki, has_pages,
    has_discussions, is_fork, is_archived, is_template
4) Дата и время: created_at, updated_at
5) Особое поле: topics


Список операторов сравнения:
1) < - строго меньше (для строк раньше по алфавиту)
2) <= - меньше или равно
3) > - строго больше (для строк позже по алфавиту)
4) >= - больше или равно
5) == - проверка на равенство
6) != - проверка на неравенство